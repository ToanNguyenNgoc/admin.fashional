{"version":3,"file":"static/js/276.5ddfc8f3.chunk.js","mappings":"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","sources":["app/pages/branches/branch-from.tsx"],"sourcesContent":["import { LoadingButton } from \"@mui/lab\";\nimport { PageTitle, RoleLayout, SelectAddress, Snack, SwitchButton, UploadBtn } from \"app/components\";\nimport { RBranch } from \"app/constants\";\nimport { useFormik } from \"formik\";\nimport { useParams } from \"react-router-dom\";\nimport \"./style.scss\"\nimport { BranchBody } from \"app/models\";\nimport { useMedia, useMessage } from \"app/hooks\";\nimport { ChangeEvent } from \"react\";\nimport { useMutation, useQuery } from \"react-query\";\nimport { QR_KEY } from \"configs\";\nimport { _branch } from \"app/apis\";\nimport * as Yup from \"yup\"\nimport { validate } from \"app/utils\";\nimport { AxiosError } from \"axios\";\n\nfunction BranchFrom() {\n  const { id } = useParams()\n  const { handlePostMedia, isLoading: isLoadingMedia } = useMedia()\n  const { notification, result, onClose } = useMessage()\n  const { mutate, isLoading } = useMutation({\n    mutationFn: (body: BranchBody) => id ? _branch.update(id, body) : _branch.create(body),\n    onSuccess: () => result({\n      message: id ? 'Cập nhật thành công' : 'Tạo mới thành công',\n      color: 'success',\n    }),\n    onError: (error) => {\n      const err = error as AxiosError\n      result({\n        message: err.response?.data.message || 'Có lỗi xảy ra',\n        color: 'error'\n      })\n    }\n  })\n  const { values, errors, touched, handleChange, handleSubmit, setFieldValue } = useFormik<BranchBody>({\n    initialValues: {\n      name: '',\n      email: '',\n      hotline: '',\n      short_address: '',\n      media: null,\n      status: true,\n      province_code: undefined,\n      district_code: undefined,\n      ward_code: undefined,\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().required('Vui lòng nhập tên chi nhánh'),\n      email: Yup.string().required(\"Vui lòng nhập email\").matches(validate.email, { message: 'Nhập đúng dạng dạng email' }),\n      hotline: Yup.string().required(\"Vui lòng nhập hotline\").matches(validate.phone, { message: 'Nhập đúng dạng dạng hotline' }),\n      short_address: Yup.string().required('Vui lòng nhập địa chỉ chi nhánh'),\n      province_code: Yup.string().required('Vui lòng chọn tỉnh/thành phố'),\n      district_code: Yup.string().required('Vui lòng chọn quận/huyện'),\n      ward_code: Yup.string().required('Vui lòng chọn xã/phường'),\n    }),\n    onSubmit: (values) => {\n      mutate({\n        ...values,\n        media_id: values.media?.id || undefined\n      })\n    }\n  })\n  const { refetch, isFetching } = useQuery({\n    queryKey: [QR_KEY.branch, id],\n    queryFn: () => _branch.findById(id || 0),\n    enabled: !!id,\n    onSuccess: (data) => {\n      const { context } = data\n      setFieldValue('name', context.name)\n      setFieldValue('status', context.status)\n      setFieldValue('email', context.email || '')\n      setFieldValue('media', context.media)\n      setFieldValue('hotline', context.hotline || '')\n      setFieldValue('short_address', context.short_address || '')\n      setFieldValue('province_code', context.province?.code)\n      setFieldValue('district_code', context.district?.code)\n      setFieldValue('ward_code', context.ward?.code)\n    }\n  })\n  const onChangeMedia = (e: ChangeEvent<HTMLInputElement>) => {\n    handlePostMedia({\n      e,\n      resetOriginalResult: true,\n      callBack: (data) => setFieldValue('media', data[0])\n    })\n  }\n  return (\n    <RoleLayout permissionPath={id ? RBranch.PUT : RBranch.POST} isNavigate>\n      <>\n        <Snack message={notification.message} open={notification.openAlert} onClose={onClose} severity={notification.color} />\n        <PageTitle title={id ? \"Thay đổi thông tin\" : \"Tạo mới chi nhánh\"} />\n        <div className=\"card p-4\">\n          <form onSubmit={handleSubmit} className=\"form\">\n            <div className=\"my-3 d-flex justify-content-center\">\n              <div className=\"avatar-image\">\n                <img src={values.media?.original_url || ''} alt=\"\" />\n                <div className=\"btn-avatar-cnt\">\n                  <UploadBtn loading={isLoadingMedia} id=\"file_avatar\" onChange={onChangeMedia} />\n                </div>\n              </div>\n            </div>\n            <div className=\"column my-3\">\n              <SwitchButton\n                label=\"Trạng thái\"\n                value={values.status}\n                onChange={(e) => setFieldValue('status', e.target.checked)}\n              />\n            </div>\n            <div className=\"column my-3\">\n              <label className=\"form-label required\">Tên chi nhánh</label>\n              <input name='name' value={values.name} onChange={handleChange} type=\"text\"\n                className=\"form-control form-control-solid\"\n              />\n              {\n                touched.name && errors.name &&\n                <span className=\"text-danger fs-8\">{errors.name}</span>\n              }\n            </div>\n            <div className=\"d-flex justify-content-between row-2\">\n              <div className=\"column-2 my-3\">\n                <label className=\"form-label required\">Email liên hệ</label>\n                <input\n                  name=\"email\" value={values.email} onChange={handleChange}\n                  className=\"form-control form-control-solid\"\n                />\n                {\n                  touched.email && errors.email &&\n                  <span className=\"text-danger fs-8\">{errors.email}</span>\n                }\n              </div>\n              <div className=\"column-2 my-3\">\n                <label className=\"form-label required\">Hotline</label>\n                <input\n                  name=\"hotline\" value={values.hotline} onChange={handleChange}\n                  className=\"form-control form-control-solid\"\n                />\n                {\n                  touched.hotline && errors.hotline &&\n                  <span className=\"text-danger fs-8\">{errors.hotline}</span>\n                }\n              </div>\n            </div>\n            <div className=\"column my-3\">\n              <label className=\"form-label required\">Địa chỉ</label>\n              <input name=\"short_address\" value={values.short_address} onChange={handleChange} type=\"text\"\n                className=\"form-control form-control-solid\"\n              />\n              {\n                touched.short_address && errors.short_address &&\n                <span className=\"text-danger fs-8\">{errors.short_address}</span>\n              }\n            </div>\n            <div className=\"column my-3\">\n              <SelectAddress\n                values={{\n                  province: values.province_code,\n                  district: values.district_code,\n                  ward: values.ward_code\n                }}\n                onChangeProvince={(code) => setFieldValue('province_code', code)}\n                onChangeDistrict={(code) => setFieldValue('district_code', code)}\n                onChangeWard={(code) => setFieldValue('ward_code', code)}\n              />\n            </div>\n            <div className=\"d-flex justify-content-end mt-6\">\n              <LoadingButton loading={isLoading} type=\"submit\" color=\"success\" variant=\"contained\">\n                Lưu\n              </LoadingButton>\n              {\n                id &&\n                <LoadingButton onClick={() => refetch()} loading={isFetching} className=\"mx-2\" type=\"button\" variant=\"outlined\">\n                  Khôi phục\n                </LoadingButton>\n              }\n            </div>\n          </form>\n        </div>\n      </>\n    </RoleLayout>\n  );\n}\n\nexport default BranchFrom;"],"names":["id","useParams","useMedia","handlePostMedia","isLoadingMedia","isLoading","useMessage","notification","result","onClose","useMutation","mutationFn","body","_branch","onSuccess","message","color","onError","error","response","data","mutate","useFormik","initialValues","name","email","hotline","short_address","media","status","province_code","undefined","district_code","ward_code","validationSchema","Yup","required","matches","validate","onSubmit","values","media_id","errors","touched","handleChange","handleSubmit","setFieldValue","useQuery","queryKey","QR_KEY","queryFn","enabled","context","province","code","district","ward","refetch","isFetching","permissionPath","RBranch","isNavigate","open","openAlert","severity","title","className","src","original_url","alt","loading","onChange","e","resetOriginalResult","callBack","label","value","target","checked","type","onChangeProvince","onChangeDistrict","onChangeWard","LoadingButton","variant","onClick"],"sourceRoot":""}